# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet conso  "log your stuff" b
console.log('cbu', ${1})
endsnippet

snippet action "simple action thunk" b
function ${1} ():ThunkAction {
	return (dispatch, getState) => {
		
	}
}
endsnippet

snippet bg "background" b
bg="background"
endsnippet

snippet bg2 "secondaryBackground" i
bg="secondaryBackground"
endsnippet

snippet bg3 "tertiaryBackground" i
bg="tertiaryBackground"
endsnippet

snippet bstate "boolean useState" i
const [${1},set ${1}] = React.useState<boolean>(false);
endsnippet

snippet selector "simple selector" b
const get${1}: Selector<${2}> = createFSelector(
    'get${1}',
    [],
    () => {
      return { };
    }
);
endsnippet

snippet fcomp "create flow react component" b
// @flow
import * as React from 'react';

function ${1}(): React.Node {
  return <></>;
}

export default ${1};

endsnippet

